<?xml version="1.0"?>
<!--
 Aspect Voxeo Prophecy AWS Lex vxml Application
    * Revision: 2
    * Date: May 5, 2021
    * Vendor: Universal Speech Solutions LLC
-->
<vxml version="2.1" xmlns="http://www.w3.org/2001/vxml" >
 
  
  <script>
      <![CDATA[
        
        function  main(){
          this.result;
          this.WelcomeMessage="Welcome to orderflowers bot. How can i help you"
          this.responseMessages=" ";
          this.endOfSession=false;
          this.botSettings="";
          this.SpeechGrammar ="builtin:speech/transcribe?"

          
          if(application.lastresult$){
            this.result = application.lastresult$[0].interpretation;
          }
        
          if (this.result){
            if( this.result.textResponse.hasOwnProperty('messages')) {
              this.responseMessages= this.result.textResponse.messages[0].content;
            }
              
              var dialogAction=this.result.intentResult.sessionState.dialogAction.type;
              if(dialogAction==="Close"){
                this.endOfSession=true;
              }
              
          }
             
          if(botSettings){
            var separator=";";
              for (var key in botSettings) {
                if( botSettings.hasOwnProperty(key) ) {
                  this.botSettings += key + "=" + botSettings[key]+separator;
                } 
              }       
              
          }

          this.CreateGrammar=function(param,value){
            var separator=";";
            if(this.botSettings){
              this.SpeechGrammar += this.botSettings;

            }
            if((param!==undefined) && (value!==undefined)){
              this.SpeechGrammar += param +"=" + value + separator;
            }
            return this.SpeechGrammar;
          }
    
        }
        
       
      ]]> 
       
      

  </script>
  <!-- Read data from bot settings-->
  <data src="LexBotSettings.json" name="botSettings"/>
  <!-- Generate initial javascript application object to store grammars,returned data,messages -->
  <var name="app" expr="new main()"/> 
  <!-- initial form-->
  <form id="welcome">
    <property name="recordutterance" value="false"/>
    <property name="timeout" value="10s"/>
    <property name="incompletetimeout" value="15000ms"/>
    <field >
      <!-- Create bultin grammar based on default speech grammar bot settings and additional params-->
      <grammar  expr="app.CreateGrammar('message',app.WelcomeMessage)"/> 

     <filled>
        <!-- sore new data to app object-->
        <assign name="app" expr="new main()"/>  
        <log>got bot settings <value expr="JSON.stringify(botSettings)"/></log>
        <log>got welcome message <value expr="app.responseMessages"/></log> 
        <!-- prompt response messages-->
        <prompt><value expr="app.responseMessages"/></prompt> 
        
      </filled>
      
    </field>
    <block>
      
      <goto next="#main"/>
    </block>
  </form>


  <!-- main form in loop-->
  <form id="main">
    <property name="recordutterance" value="false"/>
    <property name="timeout" value="10s"/>
    <property name="incompletetimeout" value="15000ms"/>
    <field>
      <!-- Create bultin grammar based on default speech grammar bot settings and additional params-->
      <grammar mode="voice" expr="app.CreateGrammar()"/>
      <filled>
        <!-- sore new data to app object-->
        <assign name="app" expr="new main()"/> 
        <log>got messages <value expr="app.responseMessages"/></log> 
        <prompt><value expr="app.responseMessages"/></prompt>        
        <!-- check if dialog seession is ended-->
        <if cond="app.endOfSession">
          <log>got main message <value expr="app.endOfSession"/></log>
          <goto next="#exit"/>
        </if>
       
      </filled>
      <!-- catch no input,no match prompt earlier stored response messages-->
      <catch event="noinput nomatch">
         <prompt><value expr="app.responseMessages"/></prompt>
         <reprompt/>
      </catch>
      <!-- if error accured prompt error message and exit-->
      <catch event="error">
         <prompt><value expr="_message"/></prompt>
         <goto next="#exit"/>
      </catch>
    </field>

    
    <block>
      
      <goto next="#main"/>
    </block>
  </form>
  

  <form id="exit">
    <block>
      <prompt><break time="100ms"/>Thank you. See you next time.</prompt>
      <disconnect/>
    </block>
  </form>

  <catch>
    <log>Caught event: <value expr="_event"/>, message: <value expr="_message"/></log>
  </catch>
</vxml>
